import 'dart:io';

import 'board.dart';
// ุงูุณูุงู ุนูููู
// ูุง  ุงุนุฑู ุงู ูุงู ูุฐุง ุงููุทููุจ ูู ุงูุงุฎุชุจุงุฑ ุงู ุงููุทููุจ ูู ุชุทุจูู ููุงุชุฑ

// ุงูููุงุณ ุงูุฑุฆูุณู ููุนุจุฉ
class TicTacToeGame {
  // ูุชุบูุฑ ุงููุงุนุจ ุงูุญุงูู
  String currentPlayer = 'X';

  // ูู ุงููุนุจ ุถุฏ ุงูููุจููุชุฑ ุงู ูุง
  bool vsAI = false;

  // ุฑูุฒ ุงูููุจููุชุฑ
  String? aiSymbol;

  // ุฑูุฒ ุงููุงุนุจ ุงูุงุฎุฑ
  String? playerSymbol;

  // ููุณุช ุงูููุญุฉ
  List<List<String>> board = List.generate(
    3,
    (_) => List.generate(3, (_) => ' '),
  );

  // -------------------------------------------------------------
  // ุฏุงูุฉ ุณุคุงู ุงููุณุชุฎุฏู ุนู ููุน ุงูุฎุตู
  Future<void> _chooseMode() async {
    stdout.write('Play vs AI? (y/n): ');
    String input = stdin.readLineSync()!;
    vsAI = input.toLowerCase() == 'y';
  }

  // ุฏุงูุฉ ุงุฎุชูุงุฑ ุงููุณุชุฎุฏู ููุฑูุฒ ุงูุฐู ุณููุนุจ ุจู
  Future<void> _chooseSymbol() async {
    stdout.write('Choose your symbol (X/O): ');
    String input = stdin.readLineSync()!.toUpperCase();
    playerSymbol = input;
    // ุงุฐุง ุงุฎุชุงุฑ ููุนุจ ูุน ุงูููุจููุชุฑ ูุญุฏุฏ ุงูุฑูุฒ ููููุจููุชุฑ (ุนูุณ ุงูุฑูุฒ ุงููู ุงุฎุชุงุฑู ุงููุณุชุฎุฏู)
    if (vsAI) aiSymbol = (input == 'X' ? 'O' : 'X');
  }

  // ุฏุงูุฉ ุจุฏุก ุงููุนุจุฉ (ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ)
  Future<void> startGame() async {
    print("๐ฎ Welcome to Tic-Tac-Toe!");
    await _chooseMode();
    await _chooseSymbol();
    // ุฏุงูุฉ ุทุจุงุนุฉ ููุญุฉ ุงููุนุจ
    printBoard(board);

    while (true) {
      // --------- ุจุฏุก ุงูุญุฑูุงุช ----------
      if (vsAI && currentPlayer == aiSymbol) {
        await _aiMove();
      } else {
        await _playerMove();
      }
      // -------------------
      // ุทุจุงุนุฉ ุงูููุญุฉ ุจุนุฏ ุงูุญุฑูุฉ ูุชุฎุฒูู ุงููููุฉ ุงูุชู ุชูุช ุงุถูุชูุง ุจุนุฏ ุงูุญุฑูุฉ ุงูุงุฎูุฑุฉ
      printBoard(board);
      // ุจุนุฏ ูู ุญุฑูุฉ ูุชู ูุญุต ูู ููุฌุฏ ูุงุฆุฒ
      if (_checkWinner()) {
        print("๐ Player $currentPlayer wins!");
        break;
      }
      // ุจุนุฏ ูู ุญุฑูุฉ ูุชู ูุญุต ูู ููุฌุฏ ุฎุงูุงุช ูุงุฑุบุฉ
      // ูุงูู ุงุฐุง ูู ุชูุฌุฏ ูุชู ุงูุงุนูุงู ุนู ุงูุชุนุงุฏู ูุงูุฎุฑูุฌ ูู ุงูุฏุงูุฉ (ุงููุนุจุฉ)
      if (_isDraw()) {
        print("๐ค It's a draw!");
        break;
      }

      // ุงุฐุง ูุตู ุงูู ููุง ูุนูู ุงูู ูุง ููุฌุฏ ูุงุฆุฒ ููู ูุชู ุงูุชุนุงุฏู
      // ูุฐูู ูุชู ุงูุชุจุฏูู ุจูู ุงููุนุจูู ูุชุบููุฑ (currentPlayer) ูุงุถุงูุฉ ุญุฑูุงุช ุฌุฏูุฏุฉ
      _switchPlayer();
    }

    // ุงุฐุง ูุตู ุงูู ููุง ูุนูู ุงูู ุฎุฑุฌ ูู ูู while ูุฐูู ูุชู ุณุคุงู ุงููุณุชุฎุฏู ุนู ุงุนุงุฏุฉ ุงููุนุจุฉ ูุฑุฉ ุงุฎุฑู
    await _restartOption();
  }

  // -------------------------------------------------------------
  // ููุฌู ุญุฑูุฉ ุงููุณุชุฎุฏู
  Future<void> _playerMove() async {
    var colorPlayerSymbol = (currentPlayer == 'X') ? red : blue;
    while (true) {
      stdout.write(
        "Player $colorPlayerSymbol $currentPlayer $reset, enter your move (1-9): ",
      );

      String? input = stdin.readLineSync();

      if (input == null || int.tryParse(input) == null) {
        print("โ Invalid input. Please enter a number between 1 and 9.");
        continue;
      }

      int move = int.parse(input);
      if (move < 1 || move > 9) {
        print("โ Move out of range. Try again.");
        continue;
      }

      // ุชุญุฏูุฏ ูููุน ุงูุฑูู ูู ุงููุตูููุฉ
      // ูู ุงู row ูุงู column
      int row = (move - 1) ~/ 3;
      int col = (move - 1) % 3;

      // ุจุนุฏ ุชุญุฏูุฏ ูููุน ุฑูู ุงูุฑูุฒ ุงูุฐู ุงุฏุฎูู ุงููุณุชุฎุฏู
      // ูููู ุจูุญุต ูู ุงููููุน ูุงุฑุบ ุงู ูุง
      if (board[row][col] != ' ') {
        print("โ Cell already taken. Choose another.");
        continue;
      }
      // ุงุฐุง ูุตู ุงูู ููุง ูุนูู ุงู ุงูุงุฏุฎุงู ุตุญูุญ ููุง ุชูุฌุฏ ูุดุงูู
      // ููุชู ุญูุธ  ูููุฉ ุงูุงุฏุฎุงู ูู ุงูููุณุช ููุชู ุญูุธูุง
      board[row][col] = currentPlayer;
      break;
    }
  }

  // ุฎูุงุฑุฒููุฉ ุนูู ุงูุฏุงูุฉ ุชุนุชูุฏ ุนูู ุงุฎุชูุงุฑ ุงู ุฎุงูุฉ ูุงุฑุบุฉ
  // ููุชู ุงุฎุชูุงุฑูุง ูุงุถุงูุฉ ุงูุฑูุฒ
  Future<void> _aiMove() async {
    print("๐ค AI is making a move...");
    await Future.delayed(Duration(milliseconds: 1000));
    for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
        if (board[i][j] == ' ') {
          board[i][j] = currentPlayer;
          return;
        }
      }
    }
  }

  // -------------------------------------------------------------
  // ุงูุชุจุฏูู ุจูู ุงููุงุนุจูู ุจุนุฏ ูู ุญุฑูุฉ ุตุญูุญุฉ
  void _switchPlayer() {
    currentPlayer = (currentPlayer == 'X' ? 'O' : 'X');
  }

  // ุฎูุงุฑุฒููุฉ ุงุฎุชุจุงุฑ ุงูููุฒ
  // ูุฎุชุจุฑ 3 ุทุฑู ููููุฒ

  bool _checkWinner() {
    // ูุชู ูุญุต ุงูุฎุทูุท ุงูุงูููุฉ
    for (int i = 0; i < 3; i++) {
      if (board[i][0] == currentPlayer &&
          board[i][1] == currentPlayer &&
          board[i][2] == currentPlayer)
        return true;
      // ูุชู ูุญุต ุงูุฎุทูุท ุงูุนููุฏูุฉ
      if (board[0][i] == currentPlayer &&
          board[1][i] == currentPlayer &&
          board[2][i] == currentPlayer)
        return true;
    }

    // ุงูุฎุท ุงููุงุฆู ุงูุงูู (ูุจุฏุง ูู ุงููุณุงุฑ)
    if (board[0][0] == currentPlayer &&
        board[1][1] == currentPlayer &&
        board[2][2] == currentPlayer)
      return true;

    // ุงูุฎุท ุงููุงุฆู ุงูุซุงูู (ูุจุฏุง ูู ุงููููู)
    if (board[0][2] == currentPlayer &&
        board[1][1] == currentPlayer &&
        board[2][0] == currentPlayer)
      return true;
    return false;
  }

  bool _isDraw() {
    for (var row in board) {
      if (row.contains(' ')) return false;
    }
    return true;
  }

  // -------------------------------------------------------------

  // ุงุนุงุฏุฉ ุงููุนุจุฉ ูุฑุฉ ุงุฎุฑู ุจุนุฏ ุณุคุงู ุงููุณุชุฎุฏู ูู ูุฑูุฏ ุงูุงุนุงุฏุฉ
  Future<void> _restartOption() async {
    stdout.write("๐ Do you want to play again? (y/n): ");
    String? input = stdin.readLineSync()?.toLowerCase();
    if (input == 'y') {
      // board.clear();
      board = List.generate(3, (_) => List.generate(3, (_) => ' '));
      currentPlayer = 'X';
      await startGame();
    } else {
      print("๐ Thanks for playing!");
    }
  }
}
